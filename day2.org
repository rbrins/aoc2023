

* Day 2

** Part 1

- cubes: red, green, or blue
- hide secret number of cubes of each color in a bag
- set denoted by ';'
- determine which games would have been possible

** Part 2
The power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.

For each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?

#+NAME: puzzleInput
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 gree

#+BEGIN_SRC python :results output :var puzzleInput=puzzleInput
def readPuzzleInput(puzzleStr: str):
    puzzleList = []
    puzzleLine = ""

    for item in puzzleStr: #single characters include \n
        puzzleLine = puzzleLine + item
        if item == "\n":
            puzzleList.append(puzzleLine)
            puzzleLine = "" 

    return puzzleList

class Game:
    def __init__(self, puzzleLine: str):
        gameTup = self.getGameID(puzzleLine)
        self.gameID = gameTup[0]
        self.gameSets = self.getAllSets(puzzleLine[len(gameTup[1]):])

        self.cubeSets = []

        for game in self.gameSets:  
            self.cubeSets.append(self.getCubesInPull(game))

        #print(self.cubeSets)
        self.fewestCubeSet = self.getFewestNumCubesNeed()
        self.power = self.getPowerOfCubes()

    def getGameID(self, puzzleLine: str):

        accChars = ""
        gameID = ""
        spaceFlag = False
        for item in puzzleLine:
            accChars = accChars + item
            if item == ":":
                return (int(gameID), accChars + " ")
            if spaceFlag:
                gameID = gameID + item
            if item == " ":
                spaceFlag = True

    def getAllSets(self, puzzleLine: str):
        return puzzleLine.strip("\n").split(";")

    def getCubesInPull(self, gameSet):
        cubesDict = {"red": 0, "blue": 0, "green": 0}

        splitSet = gameSet.split(",")
        for cube in splitSet:
            for key in cubesDict:
                if key in cube:
                    cubesDict[key] = int(cube.strip(" ")[:-len(" " + key)])
        
        return cubesDict
           

    def getFewestNumCubesNeed(self):
        maxCubesInSets = {"red": 0, "blue": 0, "green": 0}

        for cubeSet in self.cubeSets:
            if cubeSet["red"] > maxCubesInSets["red"]:
                maxCubesInSets["red"] = cubeSet["red"]
            if cubeSet["blue"] > maxCubesInSets["blue"]:
                maxCubesInSets["blue"] = cubeSet["blue"]
            if cubeSet["green"] > maxCubesInSets["green"]:
                maxCubesInSets["green"] = cubeSet["green"]
        return maxCubesInSets

    def getPowerOfCubes(self):
        return (self.fewestCubeSet["red"] * self.fewestCubeSet["blue"] * self.fewestCubeSet["green"])


puzzleList = readPuzzleInput(puzzleInput)
games = []
for line in puzzleList:
    games.append(Game(line))

result = 0
for game in games:
    result += game.power

print(result)
#+END_SRC

#+RESULTS:
: 62811


** Elisp

#+BEGIN_SRC elisp :results raw
    (with-temp-buffer
      (progn (insert "(")
	     (insert-file-contents "./day2.txt")
	     (query-replace-regexp "^$" ":newline")
	     (end-of-buffer)
	     (insert ")"))

      (read (current-buffer)))



#+END_SRC

#+RESULTS:
