


* Prommpt 

You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem: they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

** Part 1 

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

1. Read until a symbol
2. get rowNum and colNum
3. check [rowNum - 1, colNum - 1] ... [rowNum + 1, colNum + 1] for a digit
4. if digit, then pass rowNum colNum to get surrounding other numbers until not digit
5. pass back to list of part numbers
6. Add up all part numbers

note: unsure if I need to check for duplicates


#+BEGIN_SRC python :results output :session part
import string

punctuation = [i for i in string.punctuation if i != '.']

puzzleInput = open("day3.txt", "r").readlines()

def getLineSymbolLocations(line: str, symbols):
    colNums = []
    colCount = 0
    for item in line:
        for symb in symbols:
            if symb in item:
                #print("ColNum {}: Found {}!".format(colCount, symb))
                colNums.append(colCount)

        colCount += 1
    return colNums

def checkForPartNums(rowNum, colNum, rows):
    partNums = []
    lastRow = len(rows) - 1

    # row above checking (can't do row 0)
    if ((rows[rowNum - 1][colNum - 1]) in string.digits) and (rowNum != 0):
        partNums.append(getFullPartNum(rows[rowNum - 1], (colNum - 1)))
    if ((rows[rowNum - 1][colNum]) in string.digits) and (rowNum != 0):
        partNums.append(getFullPartNum(rows[rowNum - 1], colNum))
    if ((rows[rowNum - 1][colNum + 1]) in string.digits) and (rowNum != 0):
        partNums.append(getFullPartNum(rows[rowNum - 1], (colNum + 1)))

    # same row checking
    if (rows[rowNum][colNum - 1]) in string.digits:
        partNums.append(getFullPartNum(rows[rowNum], (colNum - 1)))
    if (rows[rowNum][colNum + 1]) in string.digits:
        partNums.append(getFullPartNum(rows[rowNum], (colNum + 1)))

    # row below checking (can't do last row)
    if ((rows[rowNum + 1][colNum - 1]) in string.digits) and (rowNum !=lastRow):
        partNums.append(getFullPartNum(rows[rowNum + 1], (colNum - 1)))
    if ((rows[rowNum + 1][colNum]) in string.digits) and (rowNum != lastRow):
        partNums.append(getFullPartNum(rows[rowNum + 1], colNum))
    if ((rows[rowNum + 1][colNum + 1]) in string.digits) and (rowNum != lastRow):
        partNums.append(getFullPartNum(rows[rowNum + 1], (colNum + 1)))


    return partNums


def getFullPartNum(row, colNum):

    fullPartNum = row[colNum]

    # get left side first
    for item in row[colNum-1::-1]:
        if item not in string.digits:
            break

        fullPartNum = item + fullPartNum

    for item in row[colNum+1::]:
        if item not in string.digits:
            break
        fullPartNum = fullPartNum + item

    return int(fullPartNum)

count = 0
partNums = []
for line in puzzleInput:
    lineSymbols = getLineSymbolLocations(line, punctuation)
    if lineSymbols:
        for item in lineSymbols:
            partNumsSet = set(checkForPartNums(count, item, puzzleInput))
            partNums.append(list(partNumsSet))

    count += 1

result = 0

for line in partNums:
    for num in line:
        result += num

print(result)

#+END_SRC

#+RESULTS:
: 539637


** Part 2
The missing part wasn't the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.

This time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.

Consider the same engine schematic again:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.

What is the sum of all of the gear ratios in your engine schematic?

#+BEGIN_SRC python :results output :session part


#+END_SRC

#+RESULTS:
: 539637
