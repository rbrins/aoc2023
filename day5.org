

* Part 1

- seed -> soil 
- soil -> fertilizer
- fertilizer -> water
- water -> light
- light -> temperature
- temperature -> humidity
- humidity -> location

need to do a generic map nums and a getmaps

- 268585666 to low
- 621354867
#+BEGIN_SRC python :results output
import re

puzzleInput = [i for i in list(map((lambda line : line.strip()), open("./day5.txt", "r").readlines())) if i != ""]

seedNums = [int(i) for i in puzzleInput[0].split(" ") if i != "seeds:"]

def splitMaps(puzzle):

    seedDict = {}

    for item in puzzle: # should be a str
        if (re.search(".+:", item)):
            key = item[:-5:]
            seedDict[key] = []
        else:
            seedDict[key].append([int(i) for i in item.split(" ")])

    return seedDict

mapDict = splitMaps(puzzleInput[1:])

# want a single list of the map list for a given map
def createMap(mapLine, sourceNum): 
    mapDest = mapLine[0]
    mapSource = mapLine[1]
    mapSteps = mapLine[2]

    if sourceNum in range(mapSource, mapSource + mapSteps):
        return mapDest + (sourceNum - mapSource)

    return sourceNum
    

#print(seedNums)
#print(seedDict)
mappedSeeds = {}
for seed in seedNums:
    mappedSeeds[seed] = False

newMaps = {}

for key in mapDict:
    #print(key)
    # interate through each mapping
    for mapLine in mapDict[key]:
        #print("--- {} ---".format(mapLine))
        for seed in mappedSeeds:

            if (mappedSeeds[seed] == True):
                newMaps[seed] = True

            else:
                newMapNum = createMap(mapLine, seed)
                if (newMapNum != seed):
                    newMaps[newMapNum] = True
                else:
                    newMaps[seed] = False
            #print("seed: {} | mapped to {}".format(seed,createMap(item,seed)))
    
   # after all seeds are mapped, then reset mappedSeed IDs
        mappedSeeds = newMaps
        newMaps = {}

    # after all maps in a key are done, then reset mapped flag
    for seedKey in mappedSeeds:
        mappedSeeds[seedKey] = False

#print(mappedIterations)
#print(seedNums)
#print(mappedSeeds)

print(min([i for i in mappedSeeds]))
#+END_SRC

#+RESULTS:
: 35

* Part 2

#+BEGIN_SRC python :results output :tangle
import re

puzzleInput = [i for i in list(map((lambda line : line.strip()), open("./day5.txt", "r").readlines())) if i != ""]

seedNumsInit = [int(i) for i in puzzleInput[0].split(" ") if i != "seeds:"]

def getSeedNumPairs(start, length):
    return (start, length)

count = 0
seedNumPairs = []
for count in range(0, len(seedNumsInit)):
    if count % 2 == 0:
        seedNumPairs.append(getSeedNumPairs(seedNumsInit[count], seedNumsInit[count + 1]))
        #print("start: {}, length: {}".format(seedNumsInit[count], seedNumsInit[count + 1]))

    count += 1
            

def splitMaps(puzzle):

    seedDict = {}

    for item in puzzle: # should be a str
        if (re.search(".+:", item)):
            key = item[:-5:]
            seedDict[key] = []
        else:
            seedDict[key].append([int(i) for i in item.split(" ")])

    return seedDict

mapDict = splitMaps(puzzleInput[1:])

# want a single list of the map list for a given map

def mappingPairIntersection(mapLine, pair): 
    mapDest = mapLine[0]
    mapSource = mapLine[1]
    srcDestDiff = mapSource - mapDest
    mapSteps = mapLine[2]

    pairList = range(pair[0], pair[0] + pair[1])
    #print("pairList:     {}".format(pairList))

    mapping = range(mapSource, mapSource + mapSteps)
    #print("mapping:      {}".format(mapping))
    
    intersectionSrc = [value for value in mapping if value in pairList]
    #print("intersection: {}".format(intersectionSrc))

    if intersectionSrc:
        return ((min(intersectionSrc) - srcDestDiff), len(intersectionSrc))

    return pair
    

#print(seedNums)
#print(seedDict)
class seedInfo:
    def __init__(self, start, step, match):
        self.pair = (start, step)
        self.mapped = match

mappedSeeds = []
for seed in seedNumPairs:
    mappedSeeds.append(seedInfo(seed[0], seed[1], False))

for key in mapDict:
    print(key)
    # interate through each mapping
    for mapLine in mapDict[key]:
        print("--- {} ---".format(mapLine))
        for info in mappedSeeds:

            # if there is not mapped
            if (info.mapped != True):
                newPair = mappingPairIntersection(mapLine, info.pair)
                oldPair = info.pair
                if (newPair != info.pair):
                    info.pair = newPair
                    info.mapped = True

                    #print("seed: {} | mapped to {}".format(oldPair, newPair))
    
    # after all maps in a key are done, then reset mapped flag
    for info in mappedSeeds:
        info.mapped = False

#print(mappedIterations)
#print(mappedSeeds)

#print(seedNumPairs)

#print([i.pair for i in mappedSeeds])

part2result = min([i.pair[0] for i in mappedSeeds])
print("Part 2 Result: {}".format(part2result))
#+END_SRC

#+RESULTS:
