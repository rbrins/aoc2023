

* Prompt


--- Day 1: Trebuchet?! ---

Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not powerful enough") and where they're even sending you ("the sky") and why your map looks mostly blank ("you sure ask a lot of questions") and hang on did you just say the sky ("of course, where do you think snow comes from") when you realize that the Elves are already loading you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:

1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet

In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?


* Python

** Part 1

- read puzzle input into different strings for each line
- read each line for first number (also last) for each number until last
- when all lines are read, add all numbers



** Part 2
--- Part Two ---

Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

#+BEGIN_SRC python :results output :var puzzleInput=puzzle-input
#!/usr/bin/python3


def readPuzzleInput(puzzleStr: str):
    puzzleList = []
    puzzleLine = ""

    for item in puzzleStr: #single characters include \n
        puzzleLine = puzzleLine + item
        if item == "\n":
            puzzleList.append(puzzleLine)
            puzzleLine = "" 

    return puzzleList


def checkForFirstNum(segment: str): 
    splIntDict = {"one":1, "two":2, "three":3, "four":4, "five":5, "six":6, "seven":7, "eight":8, "nine":9}
    value = []
    subSeg = ""

    for item in segment:
        subSeg = subSeg + item

        for key in splIntDict:
            if key in subSeg:
                value.append(splIntDict[key])
                #value = value + checkForSpelledOut(segment[len(subSeg):])
                return value


    return value

def checkForLastNum(segment: str):
    splIntDict = {"eno":1, "owt":2, "eerht":3, "ruof":4, "evif":5, "xis":6, "neves":7, "thgie":8, "enin":9}
    value = []
    subSeg = ""
    segmentRev = segment[::-1]

    for item in segmentRev:
        subSeg = subSeg + item

        for key in splIntDict:
            if key in subSeg:
                value.append(splIntDict[key])
                #value = value + checkForSpelledOut(segment[len(subSeg):])
                return value

    return value


def checkPuzLine(line: str):
            
    lineNums = []
    accChars = ""
    itemCount = 1 # since len() doesn't care about starting at 0 

    for item in line:

        try:
            digit = int(item)

            lineNums = lineNums + checkForFirstNum(accChars)
            lineNums.append(digit)

            accChars = ""

        except:
            accChars = accChars + item

            lineNums = lineNums + checkForFirstNum(accChars)


        if itemCount >= len(line):
            lineNums = lineNums + checkForLastNum(accChars)

        itemCount = itemCount + 1

    return lineNums
    

def calcPuzResult(intLists):
    result = 0

    for item in intLists:
        if item:
            first = str(item[0])
            last = str(item[-1])
            combined = first + last
            combinedInt = int(combined)
            result = result + combinedInt

    return result

puzList = readPuzzleInput(puzzleInput)
puzIntList = []
for line in puzList:
    puzIntList.append(checkPuzLine(line))
print(calcPuzResult(puzIntList))
#+END_SRC

#+RESULTS:
: 54578

* OpenAI generating Python

** OpenAI Setup

#+BEGIN_SRC python :results output
from openai import OpenAI
client = OpenAI()

completion = client.chat.completions.create(
  model="gpt-3.5-turbo",
  messages=[
    {"role": "system", "content": "You are a poetic assistant, skilled in explaining complex programming concepts with creative flair."},
    {"role": "user", "content": "Compose a poem that explains the concept of recursion in programming."}
  ]
)

print(completion.choices[0].message)

#+END_SRC

#+RESULTS:
